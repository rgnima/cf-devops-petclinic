name: Build Push and Deploy

on:
  push:
    branches:
      - main  # Trigger the workflow when changes are pushed to the `main` branch.

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORDB }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      #POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username stored as a secret
          password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password stored as a secret

      # Step 3: Set up Node.js (optional, for build prerequisites)
      #- name: Set up Node.js
      #  uses: actions/setup-node@v3
      #  with:
      #    node-version: '20' # Specify Node.js version

      # Step 4: Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/cf-devops-petclinic .

      # Step 5: Push the Docker image to Docker Hub
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/cf-devops-petclinic:latest
      # azure login    
      # - name: Log in to Azure
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}  # Azure service principal credentials as a secret
    
      # Deploy to AKS
      # - uses: Azure/aks-set-context@v4
      #   with:
      #     creds: '${{ secrets.AZURE_CREDENTIALS }}'
      #     cluster-name: ${{ secrets.AZURE_AKS_CLUSTER_NAME }}
      #     resource-group: ${{ secrets.RESOURCE_GROUP }}
      
      
      # # Step: Get AKS credentials
      # - name: Set up kubectl with AKS credentials
      #   run: |
      #     az aks get-credentials --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.AZURE_AKS_CLUSTER_NAME }}
      
      # - name: Create NS for app
      #   run: |
      #     chmod +x k8s/sct-create-ns.sh
      #     ./k8s/sct-create-ns.sh

      # - name: Create Postgres Secrets
      #   run: |
      #     kubectl -n app create secret generic pg-db-secret \
      #     --from-literal=POSTGRES_USER=$POSTGRES_USER \
      #     --from-literal=POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
      #     --from-literal=POSTGRES_DB=$POSTGRES_DB \          
      #     --dry-run=client -o yaml | kubectl apply -f -

      # - name: Deploy App and database
      #   uses: Azure/k8s-deploy@v5
      #   with:
      #     action: deploy
      #     namespace: app
      #     manifests: |
      #       k8s/01-deploy-db.yaml
      #       k8s/02-service-db.yaml
      #       k8s/03-deploy-app.yaml
      #       k8s/04-service-app.yaml            
      
      # - name: Install Helm v3.10.1
      #   uses: azure/setup-helm@v4.2.0
      #   with:
      #     version: 'v3.10.1' # default is latest (stable)
      #   id: install      

      # - name: Deploy Prometheus and Grafana 
      #   run: |
      #     if helm status prometheus -n prometheus >/dev/null 2>&1; then
      #       echo "Prometheus is already installed"
      #     else
      #       helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      #       helm repo update
      #       helm install prometheus prometheus-community/kube-prometheus-stack -n prometheus
      #     fi
      # - name: Deploy Grafana Service
      #   uses: Azure/k8s-deploy@v5
      #   with:
      #     action: deploy
      #     namespace: prometheus
      #     manifests: |
      #       k8s/05-service-grafana.yaml